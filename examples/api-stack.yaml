Description: Http api
Resources:
  Api:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Description: Test api
      Name: MyTestApi
      ProtocolType: HTTP

  DefaultStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref Api
      StageName: $default
      AccessLogSettings:
        DestinationArn: !GetAtt LogGroup.Arn
        Format: >-
          {"requestTime":"$context.requestTime","responseLength":"$context.responseLength","requestId":"$context.requestId","sourceIp":"$context.identity.sourceIp","httpMethod":"$context.httpMethod","path":"$context.path","status":"$context.status","protocol":"$context.protocol","integrationStatus":"$context.integrationStatus","integrationError":"$context.integration.error","integrationErrorMessage":"$context.integrationErrorMessage"}
      AutoDeploy: true

  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: /apigateway/accesslog/TestApi
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  ResourcePolicy:
    Type: 'AWS::Logs::ResourcePolicy'
    Properties:
      PolicyDocument: !Join
        - ''
        - - >-
            {"Statement":[{"Action":["logs:CreateLogStream","logs:PutLogEvents"],"Effect":"Allow","Principal":{"Service":"apigateway.amazonaws.com"},"Resource":"
          - !GetAtt LogGroup.Arn
          - '"}],"Version":"2012-10-17"}'
      PolicyName: ApiAccessLogGroupPolicyTestApi

  Integration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref Api
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt Lambda.Arn
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'

  ApiGatewayInvokePermissionForRetrieveBooks:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Lambda.Arn
      Principal: apigateway.amazonaws.com

  Route:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref Api
      RouteKey: ANY /request
      Target: !Join
        - /
        - - integrations
          - !Ref Integration

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  Lambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log(event);
            return {
              statusCode: 200,
              body: JSON.stringify({
                message: 'Hello from Lambda!',
              }),
            };
          };
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs14.x
    DependsOn:
      - LambdaRole
